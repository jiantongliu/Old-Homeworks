%% AON Six Combination Decoding by Neural Network

% The aim of this program is to decode the six combinations of given
% sample odors from the neural activity recorded.
% Jiantong Liu

clc;
clear;

%% Load Data

load('AON_Data_Six');

All_FR = AON_Data_Six;

%% Two Categories


resultmat2 = zeros(1,6);
for i = 1:6
    for j = 1:6
        if i ~= j
            resultmat2(i,j) = mean(catneural2(All_FR,i,j,5)); 
        end
    end
end
figure;
bar(resultmat2(2:6));
xticklabels({'(20%,80%)','(40%,60%)','(60%,40%)','(80%,20%)','(100%,0%)'});
title('Average Test Result with Category (0%,100%)');

%% Training, All 6

All_FR = AON_Data_Six;
resultmat = zeros(0,0);
predictmat = zeros(0,0);

for n_Repeats = 1:10
    
    % Randomly Select n_Neurons from All Neurons
    n_Neurons = 100;
    FR = All_FR(randsample(length(All_FR),n_Neurons),:);
    
    % Makre Sure No NaN Values
    while sum(isnan(cell2mat(FR(:,3))))
        FR = All_FR(randsample(length(All_FR),n_Neurons),:);
    end
    
    Norm_FR = cell(n_Neurons,1);
    for iNeuron = 1:n_Neurons
        for i = 1:6
            Norm_FR{iNeuron,i} = FR{iNeuron,i+1};
        end
    end
    
    % Preparation for Neural Network Training
    n_Trials = 10;
    time_bin = 21:24; % Sample Odor Period
    
    % Loop and Get Average Accuracy of the Neural Network Model
    for n = 1:30
        for iNeuron = 1:n_Neurons
            for i = 1:6
                Norm_SelTrial_FR{iNeuron,i} = Norm_FR{iNeuron,i}(randsample(size(Norm_FR{iNeuron,i},1),n_Trials),:);
                Norm_SelTrial_FR{iNeuron,i} = mean(Norm_SelTrial_FR{iNeuron,i}(:,time_bin),2);
            end
        end
        
        for iNeuron = 1:n_Neurons
            Combination1(:,iNeuron) = Norm_SelTrial_FR{iNeuron,1}';
            Combination2(:,iNeuron) = Norm_SelTrial_FR{iNeuron,2}';
            Combination3(:,iNeuron) = Norm_SelTrial_FR{iNeuron,3}';
            Combination4(:,iNeuron) = Norm_SelTrial_FR{iNeuron,4}';
            Combination5(:,iNeuron) = Norm_SelTrial_FR{iNeuron,5}';
            Combination6(:,iNeuron) = Norm_SelTrial_FR{iNeuron,6}';
        end
        

        X = [Combination1;Combination2;Combination3;Combination4;Combination5;Combination6];
        Y = zeros(6*n_Trials,6);
        for i = 1:6
            Y((i-1)*n_Trials+1:i*n_Trials,i) = 1;
        end
        
                
        % Solve a Pattern Recognition Problem with a Neural Network
        % Script generated by Neural Pattern Recognition app
        % Created 28-Feb-2022 17:14:14
        %
        % This script assumes these variables are defined:
        %
        %   X - input data.
        %   Y - target data.

        x = X';
        t = Y';

        % Choose a Training Function
        % For a list of all training functions type: help nntrain
        % 'trainlm' is usually fastest.
        % 'trainbr' takes longer but may be better for challenging problems.
        % 'trainscg' uses less memory. Suitable in low memory situations.
        trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

        % Create a Pattern Recognition Network
        hiddenLayerSize = 10;
        net = patternnet(hiddenLayerSize, trainFcn);

        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 70/100;
        net.divideParam.valRatio = 15/100;
        net.divideParam.testRatio = 15/100;

        % Train the Network
        [net,tr] = train(net,x,t);

        % Test the Network
        y = net(x);
        e = gsubtract(t,y);
        performance = perform(net,t,y);
        tind = vec2ind(t);
        yind = vec2ind(y);
        percentErrors = sum(tind ~= yind)/numel(tind);
        

        % View the Network
        %view(net);

        % Plots
        % Uncomment these lines to enable various plots.
        %figure, plotperform(tr)
        %figure, plottrainstate(tr)
        %figure, ploterrhist(e)
        %figure, plotconfusion(t,y)
        %figure, plotroc(t,y)


        testaccuracy(n,1) = sum(tind(tr.testInd) == yind(tr.testInd))/size(tr.testInd,2);
        test_performance(n,1) = tr.best_tperf;
        verify_performance(n,1) = tr.best_vperf;
        train_performance(n,1) = tr.best_perf;
        performance_index(n,1) = performance;
        resultmat(1,size(resultmat,2)+1:size(resultmat,2)+size(tr.testInd,2)) = tind(tr.testInd);
        predictmat(1,size(predictmat,2)+1:size(predictmat,2)+size(tr.testInd,2)) = yind(tr.testInd);
    end
    mean_testperformance(n_Repeats,1) = mean(test_performance);
    mean_verifyperformance(n_Repeats,1) = mean(verify_performance);
    mean_trainperformance(n_Repeats,1) = mean(train_performance);
    mean_performance_index(n_Repeats,1) = mean(performance_index);
    mean_testaccuracy(n_Repeats,1) = mean(testaccuracy);
end

figure;
histogram(mean_testaccuracy,5);
title('Neural Network Test Accuracy');

figure;
newfig = confusionchart(predictmat, resultmat);
title('Confusion Matrix of Testing Results');
newfig.RowSummary = 'row-normalized';
newfig.ColumnSummary = 'column-normalized';

%% REVISED
%% Load Data

load('AON_Data_Six');

All_FR = AON_Data_Six;

%% Two Categories


resultmat2 = zeros(1,6);
for j = 2:6
    resultmat2(j) = mean(catneural2(All_FR, 1,j,5)); 
end
figure;
bar(resultmat2(2:6));
xticklabels({'(20%,80%)','(40%,60%)','(60%,40%)','(80%,20%)','(100%,0%)'});
title('Average Test Result with Category (0%,100%)');

%% Training, All 6

All_FR = AON_Data_Six;
resultmat = zeros(0,0);
predictmat = zeros(0,0);

for n_Repeats = 1:10
    
    % Randomly Select n_Neurons from All Neurons
    n_Neurons = length(All_FR);
    
    % Normalize FR
    Norm_FR = cell(n_Neurons,1);
    for iNeuron = 1:n_Neurons
        [Norm_FR{iNeuron,1},Norm_FR{iNeuron,2},Norm_FR{iNeuron,3},Norm_FR{iNeuron,4},Norm_FR{iNeuron,5},Norm_FR{iNeuron,6}] = normalizeMultipleFR(All_FR{iNeuron,2},All_FR{iNeuron,3},All_FR{iNeuron,4},All_FR{iNeuron,5},All_FR{iNeuron,6},All_FR{iNeuron,7},[5:16]);
    end
    
    % Preparation for Neural Network Training
    n_Trials = 10;
    time_bin = 21:24; % Sample Odor Period
    
    % Loop and Get Average Accuracy of the Neural Network Model
    for n = 1:100
        for iNeuron = 1:n_Neurons
            for i = 1:6
                Norm_SelTrial_FR{iNeuron,i} = Norm_FR{iNeuron,i}(randsample(size(Norm_FR{iNeuron,i},1),n_Trials),:);
                Norm_SelTrial_FR{iNeuron,i} = mean(Norm_SelTrial_FR{iNeuron,i}(:,time_bin),2);
            end
        end
        
        for iNeuron = 1:n_Neurons
            Combination1(:,iNeuron) = Norm_SelTrial_FR{iNeuron,1}';
            Combination2(:,iNeuron) = Norm_SelTrial_FR{iNeuron,2}';
            Combination3(:,iNeuron) = Norm_SelTrial_FR{iNeuron,3}';
            Combination4(:,iNeuron) = Norm_SelTrial_FR{iNeuron,4}';
            Combination5(:,iNeuron) = Norm_SelTrial_FR{iNeuron,5}';
            Combination6(:,iNeuron) = Norm_SelTrial_FR{iNeuron,6}';
        end
        

        X = [Combination1;Combination2;Combination3;Combination4;Combination5;Combination6];
        Y = zeros(6*n_Trials,6);
        for i = 1:6
            Y((i-1)*n_Trials+1:i*n_Trials,i) = 1;
        end
        
                
        % Solve a Pattern Recognition Problem with a Neural Network
        % Script generated by Neural Pattern Recognition app
        % Created 28-Feb-2022 17:14:14
        %
        % This script assumes these variables are defined:
        %
        %   X - input data.
        %   Y - target data.

        x = X';
        t = Y';

        % Choose a Training Function
        % For a list of all training functions type: help nntrain
        % 'trainlm' is usually fastest.
        % 'trainbr' takes longer but may be better for challenging problems.
        % 'trainscg' uses less memory. Suitable in low memory situations.
        trainFcn = 'trainscg'; 

        % Create a Pattern Recognition Network
        hiddenLayerSize = 50;
        net = patternnet(hiddenLayerSize, trainFcn);

        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 70/100;
        net.divideParam.valRatio = 15/100;
        net.divideParam.testRatio = 15/100;

        % Train the Network
        [net,tr] = train(net,x,t);

        % Test the Network
        y = net(x);
        e = gsubtract(t,y);
        performance = perform(net,t,y);
        tind = vec2ind(t);
        yind = vec2ind(y);
        percentErrors = sum(tind ~= yind)/numel(tind);
        

        % View the Network
        %view(net);

        % Plots
        % Uncomment these lines to enable various plots.
        %figure, plotperform(tr)
        %figure, plottrainstate(tr)
        %figure, ploterrhist(e)
        %figure, plotconfusion(t,y)
        %figure, plotroc(t,y)


        testaccuracy(n,1) = sum(tind(tr.testInd) == yind(tr.testInd))/size(tr.testInd,2);
        test_performance(n,1) = tr.best_tperf;
        verify_performance(n,1) = tr.best_vperf;
        train_performance(n,1) = tr.best_perf;
        performance_index(n,1) = performance;
        resultmat(1,size(resultmat,2)+1:size(resultmat,2)+size(tr.testInd,2)) = tind(tr.testInd);
        predictmat(1,size(predictmat,2)+1:size(predictmat,2)+size(tr.testInd,2)) = yind(tr.testInd);
    end
    mean_testperformance(n_Repeats,1) = mean(test_performance);
    mean_verifyperformance(n_Repeats,1) = mean(verify_performance);
    mean_trainperformance(n_Repeats,1) = mean(train_performance);
    mean_performance_index(n_Repeats,1) = mean(performance_index);
    mean_testaccuracy(n_Repeats,1) = mean(testaccuracy);
end

figure;
histogram(mean_testaccuracy,5);
title('Neural Network Test Accuracy');

figure;
newfig = confusionchart(predictmat, resultmat);
title('Confusion Matrix of Testing Results');
newfig.RowSummary = 'row-normalized';
newfig.ColumnSummary = 'column-normalized';

%% Load Data

load('AON_Data');

%% Training: Two Categories

All_FR = AON_Data;

resultmat = zeros(0,0);
predictmat = zeros(0,0);

for n_Repeats = 1:5
    
    % Randomly Select n_Neurons from All Neurons
    
    %n_Neurons = 100;
    %FR = All_FR(randsample(length(All_FR),n_Neurons),:);
    
    n_Neurons = length(All_FR);
    FR = All_FR;
    
    % Makre Sure No NaN Values
    while sum(isnan(cell2mat(FR(:,3))))
        FR = All_FR(randsample(length(All_FR),n_Neurons),:);
    end
    
    Norm_FR = cell(n_Neurons,1);
    for iNeuron = 1:n_Neurons
        for i = 1:2
            Norm_FR{iNeuron,i} = FR{iNeuron,i+23};
        end
    end
    
    % Preparation and SVM Training
    n_Trials = 30;
    time_bin = 21:24; % Sample Odor Period
    
    % Loop and Get Average Accuracy of the SVM Model
    for n = 1:100
        
        for iNeuron = 1:n_Neurons
            Norm_SelTrial_FR{iNeuron,1} = Norm_FR{iNeuron,1}(randsample(size(Norm_FR{iNeuron,1},1),n_Trials),:);
            Norm_SelTrial_FR{iNeuron,1} = mean(Norm_SelTrial_FR{iNeuron,1}(:,time_bin),2);
            Norm_SelTrial_FR{iNeuron,2} = Norm_FR{iNeuron,2}(randsample(size(Norm_FR{iNeuron,2},1),n_Trials),:);
            Norm_SelTrial_FR{iNeuron,2} = mean(Norm_SelTrial_FR{iNeuron,2}(:,time_bin),2);
        end
        
        % Prepare Training Set and Test Set
        for iNeuron = 1:n_Neurons
            L(:,iNeuron) = Norm_SelTrial_FR{iNeuron,1}';
            R(:,iNeuron) = Norm_SelTrial_FR{iNeuron,2}';
        end
        
        X = [L;R];
        Y = zeros(n_Trials*2,1);
        Y(n_Trials+1:n_Trials*2) = 1;
        
        % Solve a Pattern Recognition Problem with a Neural Network
        % Script generated by Neural Pattern Recognition app
        % Created 28-Feb-2022 17:14:14
        %
        % This script assumes these variables are defined:
        %
        %   X - input data.
        %   Y - target data.

        x = X';
        t = Y';

        % Choose a Training Function
        % For a list of all training functions type: help nntrain
        % 'trainlm' is usually fastest.
        % 'trainbr' takes longer but may be better for challenging problems.
        % 'trainscg' uses less memory. Suitable in low memory situations.
        trainFcn = 'trainscg'; 

        % Create a Pattern Recognition Network
        hiddenLayerSize = 10;
        net = patternnet(hiddenLayerSize, trainFcn);

        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 70/100;
        net.divideParam.valRatio = 15/100;
        net.divideParam.testRatio = 15/100;

        % Train the Network
        [net,tr] = train(net,x,t);

        % Test the Network
        y = net(x);
        e = gsubtract(t,y);
        performance = perform(net,t,y);
        tind = vec2ind(t);
        yind = vec2ind(y);
        percentErrors = sum(tind ~= yind)/numel(tind);
        

        % View the Network
        %view(net);

        % Plots
        % Uncomment these lines to enable various plots.
        %figure, plotperform(tr)
        %figure, plottrainstate(tr)
        %figure, ploterrhist(e)
        %figure, plotconfusion(t,y)
        %figure, plotroc(t,y)


        testaccuracy(n,1) = sum(tind(tr.testInd) == yind(tr.testInd))/size(tr.testInd,2);
        test_performance(n,1) = tr.best_tperf;
        verify_performance(n,1) = tr.best_vperf;
        train_performance(n,1) = tr.best_perf;
        performance_index(n,1) = performance;
        resultmat(1,size(resultmat,2)+1:size(resultmat,2)+size(tr.testInd,2)) = tind(tr.testInd);
        predictmat(1,size(predictmat,2)+1:size(predictmat,2)+size(tr.testInd,2)) = yind(tr.testInd);
    end
    mean_testperformance(n_Repeats,1) = mean(test_performance);
    mean_verifyperformance(n_Repeats,1) = mean(verify_performance);
    mean_trainperformance(n_Repeats,1) = mean(train_performance);
    mean_performance_index(n_Repeats,1) = mean(performance_index);
    mean_testaccuracy(n_Repeats,1) = mean(testaccuracy);
end

figure;
histogram(mean_testaccuracy,5);
title('Neural Network Test Accuracy');

figure;
newfig = confusionchart(predictmat, resultmat);
title('Confusion Matrix of Testing Results');
newfig.RowSummary = 'row-normalized';
newfig.ColumnSummary = 'column-normalized';

